---
version: 1
reporting: checks-v1
policy:
  pullRequests: public
tasks:
  - $let:
      ownerEmail:
        $if: 'tasks_for == "github-push"'
        then: '${event.pusher.email}'
        else:
          $if: 'tasks_for == "github-pull-request"'
          then: '${event.pull_request.user.login}@users.noreply.github.com'
          else:
            $if: 'tasks_for == "github-release"'
            then: '${event.sender.login}@users.noreply.github.com'
      baseRepoUrl:
        $if: 'tasks_for == "github-push"'
        then: '${event.repository.html_url}'
        else:
          $if: 'tasks_for == "github-pull-request"'
          then: '${event.pull_request.base.repo.html_url}'
      base_ref:
        $if: 'tasks_for[:19] == "github-pull-request"'
        then: ${event.pull_request.base.ref}
        else:
          # event.base_ref is barely documented[1]. Testing showed it's only
          # defined when creating a new branch. It's null when pushing to an
          # existing branch
          #
          # [1] https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#push
          # [2] https://taskcluster-taskgraph.readthedocs.io/en/latest/reference/parameters.html#base-ref
          $if: 'tasks_for == "github-push" && event.base_ref'
          then: ${event.base_ref}
          else:
            $if: 'tasks_for == "github-push"'
            then: ${event.ref}
            else:
              $if: 'tasks_for in ["cron", "action"]'
              then: '${push.branch}'
      repoUrl:
        $if: 'tasks_for == "github-push"'
        then: '${event.repository.html_url}'
        else:
          $if: 'tasks_for == "github-pull-request"'
          then: '${event.pull_request.head.repo.html_url}'
      project:
        $if: 'tasks_for == "github-push"'
        then: '${event.repository.name}'
        else:
          $if: 'tasks_for == "github-pull-request"'
          then: '${event.pull_request.head.repo.name}'
      headBranch:
        $if: 'tasks_for == "github-pull-request"'
        then: ${event.pull_request.head.ref}
        else:
          $if: 'tasks_for == "github-push"'
          then: ${event.ref}
      headSha:
        $if: 'tasks_for == "github-push"'
        then: '${event.after}'
        else:
          $if: 'tasks_for == "github-pull-request"'
          then: '${event.pull_request.head.sha}'
      pullRequestAction:
        $if: 'tasks_for == "github-pull-request"'
        then: ${event.action}
        else: 'UNDEFINED'
    in:
      $if: >
        tasks_for == "github-push" && headBranch == "main"
        || (tasks_for == "github-pull-request" && pullRequestAction in ["opened", "reopened", "synchronize"])
      then:
        taskId: {$eval: as_slugid("decision_task")}
        taskGroupId: {$eval: as_slugid("decision_task")}
        schedulerId: homebrew-level-1
        created: {$fromNow: ''}
        deadline: {$fromNow: '1 day'}
        expires: {$fromNow: '1 year 1 second'}  # 1 second so artifacts expire first, despite rounding errors
        metadata:
          owner: "${ownerEmail}"
          name: Decision Task
          description: Task that generates a taskgraph and submits it to Taskcluster
          source: '${repoUrl}/raw/${headSha}/.taskcluster.yml'
        provisionerId: proj-taskcluster
        workerType: ci
        scopes:
          $if: 'tasks_for == "github-push"'
          then:
            # ${repoUrl[8:]} strips out the leading 'https://'
            # while ${headBranch[11:]} strips out 'refs/heads/'
            - 'assume:repo:${repoUrl[8:]}:branch:${headBranch[11:]}'
          else:
            $if: 'tasks_for == "github-pull-request"'
            then:
              - 'assume:repo:github.com/${event.pull_request.base.repo.full_name}:pull-request'
        dependencies: []
        requires: all-completed
        payload:
          image: mozillareleases/taskgraph:decision-d1ddb5593679cec9d7d2cdd8e9b8e2228b14ebe9b844411276cc3cfe37d189aa@sha256:b236321d98367f9cdbbd28c47bad7c0df34884897b75d266185d2e9e569ac0fa
          cache:
            homebrew-level-1-checkouts-sparse-v2: /builds/worker/checkouts
          features:
            taskclusterProxy: true
            # chainOfTrust: true
          maxRunTime: 300
          env:
            $merge:
              # run-task uses these environment variables to clone your
              # repo and checkout the proper revision
              - HOMEBREW_BASE_REPOSITORY: '${baseRepoUrl}'
                HOMEBREW_BASE_REF: '${base_ref}'
                HOMEBREW_HEAD_REPOSITORY: '${repoUrl}'
                HOMEBREW_HEAD_REF: '${headBranch}'
                HOMEBREW_HEAD_REV: '${headSha}'
                HOMEBREW_PIP_REQUIREMENTS: taskcluster/requirements.txt
                HOMEBREW_REPOSITORY_TYPE: git
                REPOSITORIES: {$json: {homebrew: "homebrew"}}
          command:
            - run-task
            - '--homebrew-checkout=/builds/worker/checkouts/src'
            - '--task-cwd=/builds/worker/checkouts/src'
            - '--'
            - bash
            - -cx
            - >
              ~/.local/bin/taskgraph decision
              --pushlog-id='0'
              --pushdate='0'
              --project='${project}'
              --message=""
              --owner='${ownerEmail}'
              --level='1'
              --base-repository="$HOMEBREW_BASE_REPOSITORY"
              --base-ref="$HOMEBREW_BASE_REF"
              --head-repository="$HOMEBREW_HEAD_REPOSITORY"
              --head-ref="$HOMEBREW_HEAD_REF"
              --head-rev="$HOMEBREW_HEAD_REV"
              --repository-type="$HOMEBREW_REPOSITORY_TYPE"
              --tasks-for='${tasks_for}'
          artifacts:
            'public':
              type: 'directory'
              path: '/builds/worker/artifacts'
              expires: {$fromNow: '1 year'}
            'public/docker-contexts':
              type: 'directory'
              path: '/builds/worker/checkouts/src/docker-contexts'
              # This needs to be at least the deadline of the
              # decision task + the docker-image task deadlines.
              # It is set to a week to allow for some time for
              # debugging, but they are not useful long-term.
              expires: {$fromNow: '7 day'}
